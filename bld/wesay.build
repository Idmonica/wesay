<project name="WeSay Build" default="build">
	<!-- This is a test line!-->
	<!-- ***************************************************************** -->
	<!-- ********* 			Set a few properties			   *********** -->
	<!-- ***************************************************************** -->
	<!-- Project build dir is the dir where the build script is located -->
	<property name="project.bld.dir"  value="${project::get-base-directory()}"/>

	<!-- Project base dir is the build dir's parent -->
	<property name="project.base.dir" value="${path::get-directory-name(project.bld.dir)}"/>

	<!-- Project source dir is a child of the base dir -->
	<property name="project.src.dir" value="${path::combine(project.base.dir,'src')}" />

	<!-- Project lib dir is a child of the base dir -->
	<property name="project.lib.base.dir" value="${path::combine(project.base.dir,'lib')}"/>

	<!-- OS Platform in Use -->
	<property name="os.platform" value="other"/>
	<if test="${platform::is-win32()}">
		<property name="os.platform" value="win32"/>
		<!-- Default runtime configuration -->
		<property name="runtime.config" value="net-2.0"/>
	</if>
	<if test="${platform::is-unix()}">
		<property name="os.platform" value="linux"/>
		<!-- Default runtime configuration -->
		<property name="runtime.config" value="mono-2.0"/>
	</if>

	<!-- Default build configuration -->
	<property name="build.config" value="Debug"/>
	<property name="build.defines" value=""/>

	<property name="configuration" value="debug"/>
	<property name="nant.settings.currentframework" value="net-2.0" />

	<target name="clean" description="Delete all previously compiled binaries.">
		<delete>
			<fileset>
				<include name="../**/bin/**" />
				<include name="../**/obj/**" />
				<include name="../output/**" />
				<include name="../release/output/*" />
				<exclude name="../.hg/**" />
				<exclude name="../lib/**" />
			</fileset>
		</delete>
	</target>

	<target name="revision_svn">
		<property name="svn.info.log" value="svninfo.txt"/>
		<exec
			program="svn.exe"
			basedir="C:\Program Files\Subversion\bin"
			commandline="info http://code.wesay.org/Palaso/trunk/Palaso"
			output="${svn.info.log}"
		/>
		<loadfile property="svn.head.revision" file="${svn.info.log}" />
		<regex pattern="^Revision: (?'revision'.*)$" input="${svn.head.revision}" options="Multiline" />
		<property name="revision" value="${string::trim(revision)}" />
		<echo message="Revision: ${revision}" />
		<delete file="${svn.info.log}" />
	</target>

	<target name="revision_teamcityhg">
		<property name="teamcity" value="${environment::get-variable('BUILD_NUMBER')}" />
		<regex pattern="^(?'revision'[^:]*)" input="${teamcity}" />
		<property name="revision" value="${string::trim(revision)}" />
		<echo message="Revision: ${revision}" />
	</target>

	<target name="version" depends="revision_teamcityhg">
		<loadfile property="version" file="version.txt">
			<filterchain>
				<expandproperties />
			</filterchain>
		</loadfile>
		<property name="version" value="${string::trim(version)}" />
		<echo message="Version: ${version}" />
	</target>

	<target name="assemblyinfo" depends="version">
		<foreach item="File" property="filename">
			<in>
				<items>
					<include name="../src/**/AssemblyInfo.cs" />
				</items>
			</in>
			<do>
				<script language="C#">
				<code><![CDATA[
				public static void ScriptMain(Project project)
				{
					StreamReader reader = new StreamReader(project.Properties["filename"]);
					string contents = reader.ReadToEnd();
					reader.Close();
					string replacement;
					string newText = contents;
					replacement = string.Format(
						"[assembly: AssemblyVersion(\"{0}\")]",
						project.Properties["version"]
					);
					newText = Regex.Replace(newText, @"\[assembly: AssemblyVersion\("".*""\)\]", replacement);
					replacement = string.Format(
						"[assembly: AssemblyFileVersion(\"{0}\")]",
						project.Properties["version"]
					);
					newText = Regex.Replace(newText, @"\[assembly: AssemblyFileVersion\("".*""\)\]", replacement);
					StreamWriter writer = new StreamWriter(project.Properties["filename"], false);
					writer.Write(newText);
					writer.Close();
				}
				]]>
				</code>
				</script>
			</do>
		</foreach>
	</target>

	<target name="build" description="Build all targets.">
		<call target="build-solution"/>
	</target>

	<target name="rebuild" depends="clean, build" />

	<target name="build-solution" depends="assemblyinfo">
		<call target="build-only"/>
	</target>

	<target name="build-only" depends="make-output-dir, set-build-config, set-runtime-config, copy-lib-files">
		<solution configuration="${runtime.config}" solutionfile="../src/wesay.sln">
		</solution>
		<property name="expected.output" value="${project.output.dir}/WeSay.App.exe"/>
		<fail unless="${file::exists(expected.output)}">Output file doesn't exist in ${expected.output}</fail>
	</target>

	<target name="test" depends="build">
		<call target="test-only"/>
	</target>

	<target name="test-only" depends="build-only">
		<nunit2>
			<formatter type="Plain" usefile="true" />
			<test>
		  <assemblies>
			<include name="${project.output.dir}/*.Test*.dll" />
			<exclude name="${project.output.dir}/Palaso*.Test*.dll" />
		  </assemblies>
		  <categories>
		  </categories>
			</test>
		</nunit2>
	</target>

	<target name="installer">
		<!--
		<exec program="msbuild.exe">
			<arg line="WeSay.proj /t:Installer" />
		</exec>
		-->
		<loadtasks assembly="nanttasks\NAnt.Contrib.Tasks.dll" />
		<msbuild project="WeSay.proj" target="Installer">
		</msbuild>
	</target>

	<!--
	<target name="publish" depends="installer">
		<exec program="ftp.exe">
			<arg line="-n -s:ftp.txt" />
		</exec>
	</target>
	-->

	<target name="publish" depends="version" >
		<exec program="c:\program files\cwRsync\bin\rsync.exe">
			<arg line='-vz -p --chmod=ug+rw -e"\"c:\program files\cwRsync\bin\ssh\" -oUserKnownHostsFile=C:\BuildAgent\conf\known_hosts -oIdentityFile=C:\BuildAgent\conf\bob.key -l bob"  "../output/installer/WeSayInstaller.${version}.msi" bob@wesay.org:/var/www/downloads/WeSayInstaller.${version}.msi' />
		</exec>
	</target>

	<!-- ***************************************************************** -->
	<!-- ********* Targets for setting the build configuration *********** -->
	<!-- ***************************************************************** -->

  <target name="set-build-config">
	<call target="set-${build.config}-build-config"/>
  </target>

  <target name="set-Debug-build-config">
	<echo message="Setting configuration to Debug."/>
	<property name="build.config" value="Debug"/>
	<property name="build.debug" value="true"/>
	<property name="build.defines" value="DEBUG,TRACE,${runtime.defines}"
		dynamic="true"/>
	<property name="zip.build.suffix" value="-dbg"/>
	<property name="msi.build.suffix" value="-dbg"/>
  </target>

  <target name="set-release-build-config">
	<echo message="Setting configuration to Release."/>
	<property name="build.config" value="Release"/>
	<property name="build.debug" value="false"/>
	<property name="build.defines" value="TRACE,${runtime.defines}"
	dynamic="true"/>
	<property name="zip.build.suffix" value=""/>
	<property name="msi.build.suffix" value=""/>
  </target>

<!-- ***************************************************************** -->
<!-- ***    Targets for setting the runtime configuration          *** -->
<!-- ***************************************************************** -->

  <target name="set-runtime-config">
	<call target="set-${runtime.config}-runtime-config"/>
  </target>

  <target name="set-default-dot-net-runtime-config">
	<fail unless="${property::exists( 'default.net.runtime' )}"
	  message="No versions of the .NET SDK were found"/>

	<call target="set-${default.net.runtime}-runtime-config" />
  </target>

  <target name="set-default-mono-runtime-config">
	<fail unless="${property::exists( 'default.mono.runtime' )}"
	  message="No versions of the Mono runtime were found"/>

	<call target="set-${default.mono.runtime}-runtime-config" />
  </target>

  <target name="set-net-1.0-runtime-config">
	<fail unless="${framework::sdk-exists( 'net-1.0' )}"
	  message="The .NET 1.0 SDK is not configured or not installed"/>

	<property name="runtime.platform" value="net"/>
	<property name="runtime.version" value="1.0"/>
	<property name="runtime.config" value="net-1.0"/>
	<property name="runtime.defines" value="NET,NET_1_0"/>
	<property name="build.mono" value="false"/>
	<property name="build.win32" value="true"/>
	<property name="build.gui" value="false"/>
	<property name="build.x86" value="false"/>
	<property name="nant.settings.currentframework"
	  value="net-1.0"/>
	<property name="zip.runtime.suffix" value="-net-1.0"/>
	<property name="msi.runtime.suffix" value="-net-1.0"/>
	<property name="supported.test.platforms"
	  value="net-1.0,net-1.1,net-2.0,mono-1.0,mono-2.0"/>
  </target>

  <target name="set-net-1.1-runtime-config">
	<property name="runtime.platform" value="net"/>
	<fail unless="${framework::sdk-exists( 'net-1.1' )}"
	  message="The .NET 1.1 SDK is not configured or not installed"/>

	<property name="runtime.platform" value="net"/>
	<property name="runtime.version" value="1.1"/>
	<property name="runtime.config" value="net-1.1"/>
	<property name="runtime.defines" value="NET,NET_1_1"/>
	<property name="build.mono" value="false"/>
	<property name="build.win32" value="true"/>
	<property name="build.gui" value="true"/>
	<property name="build.x86" value="false"/>
	<property name="nant.settings.currentframework"
	  value="net-1.1"/>
	<property name="zip.runtime.suffix" value="-net-1.1"/>
	<property name="msi.runtime.suffix" value="-net-1.1"/>
	<property name="supported.test.platforms"
	  value="net-1.0,net-1.1,net-2.0,mono-1.0,mono-2.0"/>
  </target>

  <target name="set-net-2.0-runtime-config">
	<fail unless="${framework::sdk-exists( 'net-2.0' )}"
	  message="The .NET 2.0 SDK is not configured or not installed"/>

	<property name="runtime.platform" value="net"/>
	<property name="runtime.version" value="2.0"/>
	<property name="runtime.config" value="net-2.0"/>
	<property name="runtime.defines" value="NET,NET_2_0"/>
	<property name="build.mono" value="false"/>
	<property name="build.win32" value="true"/>
	<property name="build.gui" value="true"/>
	<property name="build.x86" value="true"/>
	<property name="nant.settings.currentframework"
	  value="net-2.0"/>
	<property name="zip.runtime.suffix" value="-net-2.0"/>
	<property name="msi.runtime.suffix" value="-net-2.0"/>
	<property name="supported.test.platforms" value="net-2.0,mono-2.0"/>
  </target>

  <target name="set-mono-1.0-runtime-config">
	<fail unless="${framework::sdk-exists( 'mono-1.0' )}"
	  message="The Mono 1.0 SDK is not configured or not installed"/>

	<property name="runtime.platform" value="mono"/>
	<property name="runtime.version" value="1.0"/>
	<property name="runtime.config" value="mono-1.0"/>
	<property name="runtime.defines" value="MONO,MONO_1_0"/>
	<property name="build.mono" value="true"/>
	<property name="build.win32" value="false"/>
	<property name="build.gui" value="true"/>
	<property name="build.x86" value="false"/>
	<property name="nant.settings.currentframework"
	  value="mono-1.0"/>
	<property name="zip.runtime.suffix" value="-mono-1.0"/>
	<property name="msi.runtime.suffix" value="-mono-1.0"/>
	<property name="supported.test.platforms"
	  value="mono-1.0,mono-2.0,net-1.0,net-1.1,net-2.0"/>
  </target>

  <target name="set-mono-2.0-runtime-config">
	<fail unless="${framework::sdk-exists( 'mono-2.0' )}"
	  message="The Mono 2.0 SDK is not configured or not installed"/>

	<property name="runtime.platform" value="mono"/>
	<property name="runtime.version" value="2.0"/>
	<property name="runtime.config" value="mono-2.0"/>
	<property name="runtime.defines" value="MONO,MONO_2_0"/>
	<property name="build.mono" value="true"/>
	<property name="build.win32" value="false"/>
	<property name="build.gui" value="true"/>
	<property name="build.x86" value="true"/>
	<property name="nant.settings.currentframework" value="mono-2.0"/>
	<property name="zip.runtime.suffix" value="-mono-2.0"/>
	<property name="msi.runtime.suffix" value="-mono-2.0"/>
	<property name="supported.test.platforms" value="mono-2.0,net-2.0"/>
  </target>

	<!-- ***************************************************************** -->
	<!-- ***    Targets for setting the output directory               *** -->
	<!-- ***************************************************************** -->
	<target name="set-output-dir" depends="set-build-config,set-runtime-config">
		<property name="base.output.dir"
			value="${path::combine(project.base.dir,'output')}"/>
		<property name="os.platform.dir"
			value="${path::combine(base.output.dir,os.platform)}"/>
		<property name="runtime.platform.dir"
			value="${path::combine(os.platform.dir,runtime.platform)}"/>
		<property name="runtime.version.dir"
			value="${path::combine(runtime.platform.dir,runtime.version)}"/>
		<!-- TODO nant if this, and combine mono and win nant scripts -->
		<property name="project.output.dir"
			value="${path::combine(base.output.dir,build.config)}"/>
		<property name="project.documentation.dir"
			value="${path::combine(project.output.dir,'doc')}"/>
		<property name="project.resource.dir"
			value="${path::combine(project.output.dir,'resources')}"/>
	</target>

	<target name="make-output-dir" depends="set-output-dir">
		<mkdir dir="${project.output.dir}" unless="${directory::exists(project.output.dir)}"/>
		<mkdir dir="${project.documentation.dir}" unless="${directory::exists(project.documentation.dir)}"/>
	</target>

	<!-- ***************************************************************** -->
	<!-- ***    Targets for copying lib files to output directory      *** -->
	<!-- ***************************************************************** -->

	<target name="copy-lib-files" depends="make-output-dir, set-runtime-config">
		<call target="copy-${runtime.platform}-lib-files"/>
	</target>

	<target name="copy-mono-lib-files" depends="make-output-dir, set-build-config, set-runtime-config">
			<echo message="${project.lib.base.dir} platform ${runtime.platform}" />
		<copy todir="${project.output.dir}" flatten="true">
					<fileset basedir="${project.lib.base.dir}">
							<include name="mono/*" />
							<include name="common/*" />
					</fileset>
			</copy>
	</target>

	<target name="copy-net-lib-files" depends="make-output-dir, set-build-config, set-runtime-config">
			<echo message="${project.lib.base.dir} platform ${runtime.platform}" />
			<copy todir="${project.output.dir}" flatten="true">
					<fileset basedir="${project.lib.base.dir}">
							<include name="net2.0/*" />
							<include name="common/*" />
					</fileset>
			</copy>
	</target>

</project>
