<?xml version="1.0"?>
<doc>
	<assembly>
		<name>Spring.Services</name>
	</assembly>
	<members>
		<member name="T:Spring.Enterprise.EnterpriseServicesExporter">
			<summary>
			Exports specified components as ServicedComponents.
			</summary>
			<remarks>
			<p>
			This class will create ServicedComponent wrapper for each of the
			specified components and register them with the Component Services.
			</p>
			</remarks>
			<author>Aleksandar Seovic</author>
			<version>$Id: EnterpriseServicesExporter.cs,v 1.1 2005/04/05 10:29:44 aseovic Exp $</version>
		</member>
		<member name="M:Spring.Enterprise.EnterpriseServicesExporter.#ctor">
			<summary>
			Creates new enterprise services exporter.
			</summary>
		</member>
		<member name="M:Spring.Enterprise.EnterpriseServicesExporter.AfterPropertiesSet">
			<summary>
			Called by Spring container after object is configured in order to initialize it.
			</summary>
		</member>
		<member name="M:Spring.Enterprise.EnterpriseServicesExporter.Export">
			<summary>
			Creates ServicedComponent wrappers for the specified components and registers
			them with COM+ Component Services.
			</summary>
		</member>
		<member name="M:Spring.Enterprise.EnterpriseServicesExporter.GetKeyPair">
			<summary>
			Reads key pair from embedded resource.
			</summary>
			<returns>Key pair as a byte array.</returns>
		</member>
		<member name="M:Spring.Enterprise.EnterpriseServicesExporter.ApplyAssemblyAttributes(System.Reflection.Emit.AssemblyBuilder)">
			<summary>
			Applies custom attributes to generated assembly.
			</summary>
			<param name="assembly">Dynamic assembly to apply attributes to.</param>
		</member>
		<member name="M:Spring.Enterprise.EnterpriseServicesExporter.RefreshRoles">
			<summary>
			Replaces roles expressed using string with appropriate SecurityRoleAttribute instance.
			</summary>
		</member>
		<member name="M:Spring.Enterprise.EnterpriseServicesExporter.ParseRole(System.String)">
			<summary>
			Parses string representation of SecurityRoleAttribute.
			</summary>
			<param name="roleString">Role definition string.</param>
			<returns>Configured SecurityRoleAttribute instance.</returns>
		</member>
		<member name="P:Spring.Enterprise.EnterpriseServicesExporter.ObjectFactory">
			<summary>
			Sets object factory instance.
			</summary>
		</member>
		<member name="P:Spring.Enterprise.EnterpriseServicesExporter.Components">
			<summary>
			Gets or sets list of components to export.
			</summary>
		</member>
		<member name="P:Spring.Enterprise.EnterpriseServicesExporter.ApplicationName">
			<summary>
			Gets or sets COM+ application name.
			</summary>
		</member>
		<member name="P:Spring.Enterprise.EnterpriseServicesExporter.ApplicationId">
			<summary>
			Gets or sets application identifier (GUID). Defaults to generated GUID if not specified.
			</summary>
		</member>
		<member name="P:Spring.Enterprise.EnterpriseServicesExporter.ActivationMode">
			<summary>
			Gets or sets application activation mode, which can be either <b>Server</b> or <b>Library</b> (default).
			</summary>
		</member>
		<member name="P:Spring.Enterprise.EnterpriseServicesExporter.Description">
			<summary>
			Gets or sets application description.
			</summary>
		</member>
		<member name="P:Spring.Enterprise.EnterpriseServicesExporter.AccessControl">
			<summary>
			Gets or sets access control attribute.
			</summary>
		</member>
		<member name="P:Spring.Enterprise.EnterpriseServicesExporter.ApplicationQueuing">
			<summary>
			Gets or sets application queuing attribute.
			</summary>
		</member>
		<member name="P:Spring.Enterprise.EnterpriseServicesExporter.Roles">
			<summary>
			Gets or sets application roles.
			</summary>
		</member>
		<member name="P:Spring.Enterprise.EnterpriseServicesExporter.Assembly">
			<summary>
			Gets or sets name of the generated assembly that will contain serviced components.
			</summary>
		</member>
		<member name="T:Spring.Enterprise.ServicedComponentExporter">
			<summary>
			Encapsulates information necessary to create ServicedComponent
			wrapper around target class.
			</summary>
			<remarks>
			<p>
			Instances of this class should be used as elements in the Components
			list of the <see cref="T:Spring.Enterprise.EnterpriseServicesExporter"/> class, which will
			register them with COM+ Services.
			</p>
			</remarks>
			<author>Aleksandar Seovic</author>
			<version>$Id: ServicedComponentExporter.cs,v 1.5 2005/08/24 05:03:32 aseovic Exp $</version>
		</member>
		<member name="M:Spring.Enterprise.ServicedComponentExporter.#ctor">
			<summary>
			Creates new instance of serviced component definition.
			</summary>
		</member>
		<member name="M:Spring.Enterprise.ServicedComponentExporter.CreateWrapperType(System.Reflection.Emit.ModuleBuilder,Spring.Objects.Factory.Support.DefaultListableObjectFactory)">
			<summary>
			Creates ServicedComponent wrapper around target class.
			</summary>
			<param name="module">Dynamic module builder to use</param>
			<param name="objectFactory">Object factory to get target from.</param>
		</member>
		<member name="P:Spring.Enterprise.ServicedComponentExporter.TargetName">
			<summary>
			Gets or sets name of the target object that should be exposed as a serviced component.
			</summary>
		</member>
		<member name="P:Spring.Enterprise.ServicedComponentExporter.ObjectName">
			<summary>
			Sets object name.
			</summary>
		</member>
		<member name="P:Spring.Enterprise.ServicedComponentExporter.ClassAttributes">
			<summary>
			Gets a list of custom attributes that should be applied to a proxy class.
			</summary>
		</member>
		<member name="P:Spring.Enterprise.ServicedComponentExporter.MethodAttributes">
			<summary>
			Gets a map of custom attributes that should be applied to proxy methods.
			</summary>
			<remarks>
			Map key is an expression that methods can be matched against. Value is a list
			of attributes that should be applied to each method that matches expression.
			</remarks>
		</member>
		<member name="T:Spring.Enterprise.ServicedComponentFactory">
			<summary>
			Factory Object that instantiates and configures ServicedComponent.
			</summary>
			<remarks>
			<p>
			This factory object should be used to instantiate and configure
			serviced components created by <see cref="T:Spring.Enterprise.ServicedComponentExporter"/>.
			</p>
			</remarks>
			<author>Aleksandar Seovic</author>
			<version>$Id: ServicedComponentFactory.cs,v 1.2 2005/04/05 10:29:44 aseovic Exp $</version>
		</member>
		<member name="M:Spring.Enterprise.ServicedComponentFactory.#ctor">
			<summary>
			Creates new instance of serviced component factory.
			</summary>
		</member>
		<member name="M:Spring.Enterprise.ServicedComponentFactory.GetObject">
			<summary>
			Returns configured instance of the serviced component.
			</summary>
			<returns>Configured instance of the serviced component.</returns>
		</member>
		<member name="M:Spring.Enterprise.ServicedComponentFactory.AfterPropertiesSet">
			<summary>
			Initializes factory object.
			</summary>
		</member>
		<member name="M:Spring.Enterprise.ServicedComponentFactory.CreateInstance">
			<summary>
			Creates new instance of serviced component.
			</summary>
			<returns>New instance of serviced component.</returns>
		</member>
		<member name="P:Spring.Enterprise.ServicedComponentFactory.Name">
			<summary>
			Gets or sets component name, as registered with COM+ Services.
			</summary>
		</member>
		<member name="P:Spring.Enterprise.ServicedComponentFactory.Template">
			<summary>
			Gets or sets name of the template object definition that should
			be used to configure component instance.
			</summary>
		</member>
		<member name="P:Spring.Enterprise.ServicedComponentFactory.Server">
			<summary>
			Gets or sets name of the remote server that COM+ component is registered with.
			</summary>
		</member>
		<member name="P:Spring.Enterprise.ServicedComponentFactory.ObjectType">
			<summary>
			Returns type of serviced component.
			</summary>
		</member>
		<member name="P:Spring.Enterprise.ServicedComponentFactory.IsSingleton">
			<summary>
			Gets or sets whether serviced component should be treated as singleton. Default is <b>false</b>.
			</summary>
		</member>
		<member name="P:Spring.Enterprise.ServicedComponentFactory.ObjectFactory">
			<summary>
			Sets object factory to use for component configuration.
			</summary>
		</member>
		<member name="T:Spring.Remoting.IRemoteFactory">
			<summary>
			Interface for a SAO based object factory.
			</summary>
			<remarks>
			<p>
			Provides a well known location for clients to retrieve
			references to remoted objects (typically CAO references), by name.
			</p>
			</remarks>
			<author>Aleksandar Seovic</author>            <author>Mark Pollack</author>            <version>$Id: IRemoteFactory.cs,v 1.3 2005/11/11 22:25:28 markpollack Exp $</version>
		</member>
		<member name="M:Spring.Remoting.IRemoteFactory.GetObject(System.String)">
			<summary>
			Returns a CAO proxy for the specified name.
			</summary>
			<param name="name">Object name</param>
			<returns>Remote object for the specified name.</returns>
		</member>
		<member name="M:Spring.Remoting.IRemoteFactory.GetObject(System.String,System.Object[])">
			<summary>
			Returns a CAO proxy for the specified name using the
			argument list to call the constructor.
			</summary>
			<remarks>
			The matching of arguments to call the constructor is done
			by type.  The alternative ways, by index and by constructor
			name are not supported.
			</remarks>
			<param name="name">Object name</param>
			<param name="constructorArguments">Constructor
			arguments used to create the object.</param>
			<returns>Remote proxy for the specified name</returns>
		</member>
		<member name="M:Spring.Remoting.IRemoteFactory.GetSaoObject(System.String)">
			<summary>
			Returns a SAO proxy for the specified name.
			</summary>
			<remarks>
			The
			</remarks>
			<param name="name">Object name</param>
			<returns>Remote proxy for the specified name</returns>
		</member>
		<member name="T:Spring.Remoting.NamedServiceEntry">
			<summary>
			A collection of properties need to integrate SAO lookup with
			the <see cref="T:Spring.Remoting.IRemoteFactory"/>
			</summary>
		</member>
		<member name="M:Spring.Remoting.NamedServiceEntry.#ctor">
			<summary>
			Create an instance of a NamedServiceEntry.
			</summary>
		</member>
		<member name="M:Spring.Remoting.NamedServiceEntry.AfterPropertiesSet">
			<summary>
			Invoked by an <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
			after it has set all object properties supplied
			</summary>
			<remarks>
			<p>
			Required properties are Name, ServiceInterface, and ServiceUri
			</p>
			</remarks>
			<exception cref="T:System.Exception">
			In the event of misconfiguration (such as failure to set an essential
			property) or if initialization fails.
			</exception>
		</member>
		<member name="P:Spring.Remoting.NamedServiceEntry.Name">
			<summary>
			The name used to identify the SAO entry.
			</summary>
		</member>
		<member name="P:Spring.Remoting.NamedServiceEntry.ServiceType">
			<summary>
			The service to export, populated via an object reference.
			</summary>
		</member>
		<member name="P:Spring.Remoting.NamedServiceEntry.ServiceUri">
			<summary>
			The uri of the well known object
			</summary>
		</member>
		<member name="T:Spring.Remoting.RemoteFactory">
			<summary>
			Summary description for RemoteFactory.
			</summary>
		</member>
		<member name="F:Spring.Remoting.RemoteFactory.objectFactory">
			<summary>
			The object factory where the RemoteFactory was declared.
			</summary>
		</member>
		<member name="M:Spring.Remoting.RemoteFactory.#ctor">
			<summary>
			Create a new instance of the RemoteFactory.
			</summary>
		</member>
		<member name="M:Spring.Remoting.RemoteFactory.GetObject(System.String)">
			<summary>
			Returns a CAO remote object for the specified name.
			</summary>
			<param name="name">Object name.</param>
			<returns>Remote object for the specified name.</returns>
		</member>
		<member name="M:Spring.Remoting.RemoteFactory.GetObject(System.String,System.Object[])">
			<summary>
			Returns a CAO proxy for the specified name using the
			argument list to call the constructor.
			</summary>
			<remarks>
			The matching of arguments to call the constructor is done
			by type.  The alternative ways, by index and by constructor
			name are not supported.
			</remarks>
			<param name="name">Object name</param>
			<param name="constructorArguments">Constructor
			arguments used to create the object.</param>
			<returns>Remote proxy for the specified name</returns>
		</member>
		<member name="M:Spring.Remoting.RemoteFactory.GetSaoObject(System.String)">
			<summary>
			Returns a SAO proxy for the specified name.
			</summary>
			<remarks>
			The
			</remarks>
			<param name="name">Object name</param>
			<returns>Remote proxy for the specified name</returns>
		</member>
		<member name="M:Spring.Remoting.RemoteFactory.AfterPropertiesSet">
			<summary>
			Invoked by an <see cref="T:Spring.Context.IApplicationContextAware"/>
			after it has set all object properties supplied
			(and satisfied the
			<see cref="T:System.Exception"/>
			and <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
			interfaces).
			</summary>
			<remarks>
			<p>
			This method allows the object instance to perform initialization only
			possible when all object properties have been set and to throw an
			exception in the event of misconfiguration.
			</p>
			</remarks>
			<exception cref="T:Spring.Objects.Factory.IObjectFactoryAware">
			In the event of misconfiguration (such as failure to set an essential
			property) or if initialization fails.
			</exception>
		</member>
		<member name="P:Spring.Remoting.RemoteFactory.ServiceEntries">
			<summary>
			The list of named service entry points.
			</summary>
		</member>
		<member name="P:Spring.Remoting.RemoteFactory.ObjectFactory">
			<summary>
			Callback that supplies the owning factory to an object instance.
			</summary>
			<value>
			Owning <see cref="T:Spring.Objects.Factory.IObjectFactory"/>
			(may not be <see langword="null"/>). The object can immediately
			call methods on the factory.
			</value>
			<remarks>
			<p>
			Invoked after population of normal object properties but before an init
			callback like <see cref="T:Spring.Objects.Factory.IInitializingObject"/>'s
			<see cref="M:Spring.Objects.Factory.IInitializingObject.AfterPropertiesSet"/>
			method or a custom init-method.
			</p>
			</remarks>
			<exception cref="T:Spring.Objects.ObjectsException">
			In case of initialization errors.
			</exception>
		</member>
		<member name="T:Spring.Remoting.SaoExporter">
			<summary>
			Publishes an instance of an object under
			a given url as a Server Activated Object (SAO).
			</summary>
			<remarks>
			Object can be exported either as SingleCall or Singleton.
			</remarks>
			<author>Aleksandar Seovic</author>
		</member>
		<member name="M:Spring.Remoting.SaoExporter.#cctor">
			<summary>
			Initializes assembly and module builder that will be used
			to dynamically create remote object wrappers.
			</summary>
		</member>
		<member name="M:Spring.Remoting.SaoExporter.#ctor">
			<summary>
			Creates a new instance of the SAO exporter.
			</summary>
		</member>
		<member name="M:Spring.Remoting.SaoExporter.AfterPropertiesSet">
			<summary>
			Called by application context after properties are initialized.
			</summary>
		</member>
		<member name="M:Spring.Remoting.SaoExporter.Export">
			<summary>
			Exports specified target as a SAO object.
			</summary>
		</member>
		<member name="P:Spring.Remoting.SaoExporter.ApplicationName">
			<summary>
			Gets or sets the name of the remote application.
			</summary>
		</member>
		<member name="P:Spring.Remoting.SaoExporter.ServiceName">
			<summary>
			Gets or sets the name of the exported remote service.
			</summary>
		</member>
		<member name="P:Spring.Remoting.SaoExporter.TargetName">
			<summary>
			Gets or sets the name of the target object definition.
			</summary>
		</member>
		<member name="P:Spring.Remoting.SaoExporter.Mode">
			<summary>
			Gets or sets SAO mode.
			</summary>
		</member>
		<member name="P:Spring.Remoting.SaoExporter.ObjectFactory">
			<summary>
			Sets object factory to use.
			</summary>
		</member>
		<member name="T:Spring.Remoting.SaoFactoryObject">
			<summary>
			Simple factory for creating a reference to a
			remote server activated object (SAO).
			This is useful alternative to adminstrative type registration on
			the client when you would like the client to have only
			a reference to the interface that an SAO implements and not the
			actual SAO implentation.
			</summary>
			<author>Mark Pollack (.NET)</author>
		</member>
		<member name="M:Spring.Remoting.SaoFactoryObject.AfterPropertiesSet">
			<summary>
			Callback method called once all factory properties have been set.
			</summary>
			<exception cref="T:System.Exception">if an error occured</exception>
		</member>
		<member name="M:Spring.Remoting.SaoFactoryObject.GetObject">
			<summary>
			Return the SAO proxy
			</summary>
			<returns>the SAO proxy</returns>
		</member>
		<member name="P:Spring.Remoting.SaoFactoryObject.ServiceInterface">
			<summary>
			The remote service interface.
			</summary>
		</member>
		<member name="P:Spring.Remoting.SaoFactoryObject.ServiceUri">
			<summary>
			The URI of the well known object
			</summary>
		</member>
		<member name="P:Spring.Remoting.SaoFactoryObject.IsSingleton">
			<summary>
			Always returns the same instance of the SAO proxy.
			</summary>
		</member>
		<member name="P:Spring.Remoting.SaoFactoryObject.ObjectType">
			<summary>
			The type of object to be created.
			</summary>
		</member>
		<member name="T:Spring.Remoting.SaoServiceExporter">
			<summary>
			Publishes an instance of a MarshalByRef object under a given url as a SAO singleton
			using RemotingServices.Marshal()
			This allows you to initialize the state of the remoted object on the server
			before clients access the object.
			</summary>
		</member>
		<member name="M:Spring.Remoting.SaoServiceExporter.#ctor">
			<summary>
			Creates a new instance of the SaoServiceExporter class.
			</summary>
		</member>
		<member name="M:Spring.Remoting.SaoServiceExporter.AfterPropertiesSet">
			<summary>
			Publish the object
			</summary>
		</member>
		<member name="M:Spring.Remoting.SaoServiceExporter.Dispose">
			<summary>
			Disconnect the object from the remoting infrastructure.  Stops objects
			from receiving andy further messages.
			</summary>
		</member>
		<member name="P:Spring.Remoting.SaoServiceExporter.ServiceName">
			<summary>
			The name that will be used in the URI to refer to this service.
			<remarks>
			This will be of the form, tcp://host:port/ServiceName or
			tcp://host:port/ApplicationName/ServiceName
			</remarks>
			</summary>
		</member>
		<member name="P:Spring.Remoting.SaoServiceExporter.Service">
			<summary>
			The service to export, populated via an object reference.
			</summary>
		</member>
		<member name="T:Spring.Web.Services.WebServiceProxyFactory">
			<summary>
			Factory Object that dynamically implements service interface for web service proxy.
			</summary>
			<remarks>
			<p>
			This factory object should be used to obtain reference to a web service proxy
			that can be safely cast to a service interface, which allows client code to code
			against interface, and not directly against .Net-generated proxy class.
			</p>
			</remarks>
			<author>Aleksandar Seovic</author>
			<version>$Id: WebServiceProxyFactory.cs,v 1.4 2005/08/24 05:03:32 aseovic Exp $</version>
		</member>
		<member name="M:Spring.Web.Services.WebServiceProxyFactory.#cctor">
			<summary>
			Initializes assembly and module builder that will be used
			to dynamically create web services proxy wrappers.
			</summary>
		</member>
		<member name="M:Spring.Web.Services.WebServiceProxyFactory.#ctor">
			<summary>
			Creates new instance of web service proxy factory.
			</summary>
		</member>
		<member name="M:Spring.Web.Services.WebServiceProxyFactory.AfterPropertiesSet">
			<summary>
			Initializes factory object.
			</summary>
		</member>
		<member name="M:Spring.Web.Services.WebServiceProxyFactory.GetObject">
			<summary>
			Creates new instance of the web service proxy.
			</summary>
			<returns>New instance of the web service proxy.</returns>
		</member>
		<member name="P:Spring.Web.Services.WebServiceProxyFactory.ProxyClass">
			<summary>
			Gets or sets type of the proxy class to wrap.
			</summary>
		</member>
		<member name="P:Spring.Web.Services.WebServiceProxyFactory.ServiceInterface">
			<summary>
			Gets or sets business interface that proxy wrapper should implement.
			</summary>
		</member>
		<member name="P:Spring.Web.Services.WebServiceProxyFactory.ObjectType">
			<summary>
			Returns type of the web service proxy.
			</summary>
		</member>
		<member name="P:Spring.Web.Services.WebServiceProxyFactory.IsSingleton">
			<summary>
			Always returns false.
			</summary>
		</member>
		<member name="M:Spring.Web.Services.WebServiceProxyFactory.WebServiceClientProxyTypeBuilder.#ctor(System.Reflection.Emit.ModuleBuilder,System.Type)">
			<summary>
			Initializes a new instance of the <see cref="T:Spring.Web.Services.WebServiceProxyFactory.WebServiceClientProxyTypeBuilder"/> class.
			</summary>
			<param name="module">The module builder to use.</param>
			<param name="serviceInterface">The service interface to implement.</param>
		</member>
	</members>
</doc>
